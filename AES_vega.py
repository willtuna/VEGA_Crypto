import numpy as np
import random 
import copy


Sbox = [
    [0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76],
    [0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0],
    [0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15],
    [0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75],
    [0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84],
    [0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF],
    [0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8],
    [0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2],
    [0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73],
    [0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB],
    [0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79],
    [0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08],
    [0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A],
    [0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E],
    [0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF],
    [0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]
    ]
Rcon = [0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36]
def vec_display(a):
    for i in a:
        print(format(i,'02x'), end=' ')
    print("")


def In2StateArray(input_bin_str):
    print(input_bin_str)
    a = []
    tmp = ""
    for idx,bi in enumerate(input_bin_str):
        tmp = tmp + str(bi)
        if (idx%8) == 7:
            a.append(tmp)
            tmp = ""

    print(a)
    state = []
    for r in range(4):
        state_row = []
        for c in range(4):
            state_row.append(int(a[r+4*c],2))
        state.append(state_row)

    return np.asarray(state)
            

def Uni_T_In2StateArray():
    rand128 = random.getrandbits(128)
    rand128 = format(rand128,"0128b")
    st = In2StateArray(rand128)
    print(st)
    return st

def AddRoundKey(st_arr, key_state):
    st_arr_bar = np.bitwise_xor(st_arr,key_state)
    return st_arr_bar

def ShiftRows(st_arr):
    for idx,row in enumerate(st_arr):
        st_arr[idx,:] = np.roll(row,-idx)
    return st_arr

def Uni_T_ShiftRows():
    st_arr = np.asarray([[0xd4,0xe0,0xb8,0x1e], 
                         [0x27,0xbf,0xb4,0x41],
                         [0x11,0x98,0x5d,0x52], 
                         [0xae,0xf1,0xe5,0x30]])
    st_arr_bar = ShiftRows(st_arr)
    state_display(st_arr_bar)
    return st_arr_bar

def mult_GF(p1,p2):
    irr =  283
    mask1 =  1<< 8
    mask2 = mask1 - 1
    p = 0
    while p2 :
        if p2 & 1:
            p ^= p1
        p1 <<= 1
        if p1 & mask1:
            p1 ^= irr
        p2 >>= 1
    return p & mask2
    

def inner_GF2_8_4(row,vec):
    S = 0
    for i in range(4):
        S ^= mult_GF(row[i],vec[i])
    return S


def key_schedule(key_state,rnd):
    rnd_key = np.zeros_like(key_state)
    R = np.zeros(4,dtype=int)
    R[0] = Rcon[rnd]
    for i in range(4):
        if i == 0:
            tmp = np.roll(key_state[:,3],-1)
            for idx,v in enumerate(tmp):
                hex_x_y = format(v,'02x')
                tmp[idx] = Sbox[int(hex_x_y[0],base=16)][int(hex_x_y[1],base=16)]
            addRcon = np.bitwise_xor(R,tmp)
            rnd_key[:,0] = np.bitwise_xor(addRcon,key_state[:,0])
        else:
            rnd_key[:,i] = np.bitwise_xor(key_state[:,i],rnd_key[:,i-1])

    return rnd_key

def Uni_T_key_schedule():
    key_state = np.asarray([[0x2b,0x28,0xab,0x09], 
                            [0x7e,0xae,0xf7,0xcf],
                            [0x15,0xd2,0x15,0x4f], 
                            [0x16,0xa6,0x88,0x3c]])
    rnd_key = key_schedule(key_state,0)
    state_display(rnd_key)
    return rnd_key



def MixColumns(st_arr):
    mx_col  = np.asarray([2,3,1,1])
    st_arr_ = copy.deepcopy(st_arr)
    for col in range(4):
        for i in range(4):
            mx_col_row = np.roll(mx_col,i)
            st_arr_[i,col] = inner_GF2_8_4(st_arr[:,col],mx_col_row)
    return st_arr_

def Uni_T_MixColumns():
    st_arr = Uni_T_ShiftRows()
    state_display(MixColumns(st_arr))

def SubByte(st_arr):
    for r in range(4):
        for c in range(4):
            hex_x_y = format(st_arr[r,c],'02x')
            st_arr[r,c]  = Sbox[int(hex_x_y[0],base=16)][int(hex_x_y[1],base=16)]

    return st_arr

def state_display(st_arr):
    print("state display")
    for r in range(4):
        for c in range(4):
            print(format(st_arr[r,c],'02x'), end='  ')
        print("")



def Uni_T_SubByte():
    st_arr = np.asarray([[0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0]])
    st_arr_bar = SubByte(st_arr)
    state_display(st_arr_bar)


def Encryption(st_arr_in, key_state_in):

    key_state = key_state_in
    # 1st Round Add round Key
    print("After Add Round Key: ",0)
    st_arr = AddRoundKey(st_arr_in,key_state_in)
    state_display(st_arr)

    for rnd in range(9): # first 9 round
        st_arr = SubByte(st_arr)
        st_arr = ShiftRows(st_arr)
        st_arr = MixColumns(st_arr) 
        key_state = key_schedule(key_state,rnd)
        st_arr = AddRoundKey(st_arr,key_state)
        print("After Add Round Key:",rnd+1)
        state_display(st_arr)

    st_arr = SubByte(st_arr)
    st_arr = ShiftRows(st_arr)
    key_state = key_schedule(key_state,9)
    st_arr = AddRoundKey(st_arr, key_state)
    print("After Add Round Key: ", 10)
    state_display(st_arr)

key_state = np.asarray([[0x2b,0x28,0xab,0x09], 
                        [0x7e,0xae,0xf7,0xcf],
                        [0x15,0xd2,0x15,0x4f], 
                        [0x16,0xa6,0x88,0x3c]])

st_arr    = np.asarray([[0x32,0x88,0x31,0xe0], 
                        [0x43,0x5a,0x31,0x37],
                        [0xf6,0x30,0x98,0x07], 
                        [0xa8,0x8d,0xa2,0x34]])
Encryption(st_arr,key_state)
